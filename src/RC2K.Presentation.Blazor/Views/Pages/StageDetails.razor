@rendermode InteractiveServer
@page "/stages/{raceName}/{id:int}"

@using RC2K.DataAccess.Interfaces
@using RC2K.DataAccess.Interfaces.Repositories
@using RC2K.DomainModel
@using RC2K.Extensions
@using RC2K.Logic.Interfaces
@using RC2K.Presentation.Blazor.Views.Components;
@using RC2K.Presentation.Blazor.ViewModels;
@inject IRallyUoW RallyUoW
@inject IStageService StageService
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager
<h3></h3>


@page "/map"
@using System.Collections.Generic

<div class="MAIN">
    <h1>@_raceName</h1>
    <div class="container" id="containerId" accesskey="">

        <div class="item stage-info">
            <div class="card" style="position: relative;">
                <div class="card-header">Stage details</div>
                <div class="card-body">
                    <div style="position: absolute; top: 0; right: 0;">
                        @if (IsArcade)
                        {
                            <a href="@NavigationManager.GetUriWithQueryParameter("IsArcade","False")">Not arcade version</a>
                        }
                        else
                        {
                            <a href="@NavigationManager.GetUriWithQueryParameter("IsArcade","True")">Arcade version</a>
                        }
                    </div>
                    <h2>@($"{_name}{(IsArcade ? " - Arcade version" : "")}")</h2>
                    <br />
                    <p>Length: @_stageDetails.Length</p>
                    <br />
                    <p>Road: @_stageDetails.Asphalt / @_stageDetails.Dirt / @_stageDetails.Gravel / @_stageDetails.Snow</p>
                    <br />
                    <p>Weather: @_stageDetails.Temp &#0043;C, wind: @_stageDetails.Wind km/H</p>
                </div>
                <div class="card-footer"></div>
            </div>
        </div>
        <div class="item stage-img">
            <div class="card" style="overflow: hidden; padding: 0; margin: 0; width: 75%;">
                <img src="img/maps/@_imgName" style="width: 100%;" />
            </div>
        </div>
        <div class="item stage-description">
            <div class="card">
                <div class="card-header">Description</div>
                <div class="card-body">
                    @_description
                </div>
                <div class="card-footer"></div>
            </div>
        </div>
        <div class="item stage-times">
            <div class="card" >
                <div class="card-header">Records</div>
                <div class="card-body times-table" style="display: grid; grid-template-columns: .5fr 1.5fr 1.5fr 1fr 1fr .5fr;">
                    <p class="th-header">#</p>
                    <p class="th-header">Time</p>
                    <p class="th-header">Driver</p>
                    <p class="th-header">Car</p>
                    <p class="th-header">Uploaded</p>
                    <p class="th-header">Verified?</p>

                    @{
                        int cnt = 0;
                    }
                    @foreach (var timeEntry in _timeEntries.OrderBy(x => x.Time).Select((x, i) => new { Place = i + 1, Data = x }))
                    {
                        cnt++;
                        <p>@timeEntry.Place</p>
                        <p>@timeEntry.Data.Time</p>
                        <p>@timeEntry.Data.Driver.Name</p>
                        <p>@timeEntry.Data.Car.Name</p>
                        <p>@timeEntry.Data.UploadTime.ToString("yyyy/MM/dd")</p>
                        <p>@(timeEntry.Data.VerifyInfo is null ? "nv" : "v")</p>
                    }
                    @for (int i = 10 - cnt; i >= 0; i--)
                    {
                        <p>@(10 - i)</p>
                        <p>---</p>
                        <p>---</p>
                        <p>---</p>
                        <p>---</p>
                        <p>---</p>
                    }
                </div>
                <div class="card-footer"></div>
            </div>
        </div>
        <div class="item stage-map">
            <div class="card" style="overflow: hidden; padding: 0; margin: 0;">
                <Map Waypoints="@_waypoints" ShowWaypoints="@ShowWaypoints" NewPathCached="@HandleNewPathCachedEvent" Path="@_path" Api="@_api" />
            </div>
        </div>
        <div class="break"></div>
    </div>

</div>


@code {
    private string _api;
    private async Task HandleNewPathCachedEvent(string path)
    {
        var stage = await RallyUoW.Stages.TryGetByCode(Id.ToString(), IsArcade);
        int stageCode = stage.Code;
        await StageService.SetPath(stageCode, path);
    }

    [Parameter]
    public string RaceName { get; set; }

    [Parameter]
    public int Id { get; set; }

    private IList<double[]> _waypoints;

    private string _name;
    private string _raceName;
    private string _description;

    private string _imgName;

    private DomainModel.StageDetails _stageDetails;

    private List<DomainModel.TimeEntry> _timeEntries = new();

    [SupplyParameterFromQuery]
    [Parameter]
    public bool IsArcade { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public bool ShowWaypoints { get; set; } = true;

    private string? _path;
    protected override async Task OnInitializedAsync()
    {

        var stage = await RallyUoW.Stages.TryGetByCode(Id.ToString(), IsArcade);
        _api = stage.StageWaypoints.ApiHint;
        _waypoints = await StageService.GetWaypoints(Id, stage.IsArcade);
        
        _path = await StageService.GetPath(Id);
        //_waypoints = [
        //];
        //string rawStr = string.Join(";", _waypoints.Select(x => string.Join(",", x.Select(d => Math.Round(d,7)))));

        _raceName = LevelHelper.RallyCodeToRallyName(Enum.Parse<RallyCode>(RaceName, true));
        _name = stage.StageData.Name;
        _imgName = stage.StageData.ImgName;
        _description = stage.StageData.Description;
        _stageDetails = stage.StageData.StageDetails;

        int cnt = Random.Shared.Next(5, 20);
        for (int i=0; i<cnt; i++)
        {
            _timeEntries.Add(new DomainModel.TimeEntry()
                {
                    Id = 1,
                    Car = new DomainModel.Car() { Id = 1, Class = 5, Name = "car" },
                    StageId = 1,
                    DriverId = 1,
                    Driver = new DomainModel.Driver() { Id = 1, Known = true, Name = "driver" },
                    CarId = 1,
                    Time = TimeOnly.FromTimeSpan(TimeSpan.FromSeconds(45)),
                    UploadTime = DateTime.Now
                });
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("calculateContainerHeight", "containerId");
    }

}
