@page "/stages/{name}"
@page "/stages"

@using RC2K.DomainModel;
@using RC2K.DataAccess.Interfaces
@using RC2K.DataAccess.Interfaces.Repositories
@using RC2K.Logic.Interfaces
@using RC2K.Presentation.Blazor.ViewModels;
@inject IRallyUoW RallyUoW
@inject IStageService StageService

<h1>Stages (@(Name ?? "All"))</h1>
<div>

    <div style="display: grid; grid-template-columns: 2fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;">
        <div>Name</div>
        <div>Length</div>
        <div>Asphalt</div>
        <div>Dirt</div>
        <div>Gravel</div>
        <div>Snow</div>
        <div>Temp</div>
        <div>Wind</div>
        <div>Mood</div>
    </div>


    @foreach (var group in @_stages.GroupBy(x => new { Rally = x.Code / 10, x.IsArcade }))
    {
        <div style="display: grid; grid-template-columns: 2fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;">
            @foreach (var stage in group)
            {
                string name = Name ?? RC2K.Extensions.LevelHelper.GetRallyCodeByStageCode(stage.Code).ToString().ToLower();
                <div><a href="stages/@name/@stage.Code?IsArcade=@stage.IsArcade">@stage.StageData.Name @(stage.IsArcade ? "(Arcade)" : "")</a></div>
                <div>@stage.StageData.StageDetails!.Length</div>
                <div>@stage.StageData.StageDetails!.Asphalt</div>
                <div>@stage.StageData.StageDetails!.Dirt</div>
                <div>@stage.StageData.StageDetails!.Gravel</div>
                <div>@stage.StageData.StageDetails!.Snow</div>
                <div>@stage.StageData.StageDetails!.Temp</div>
                <div>@stage.StageData.StageDetails!.Wind</div>
                <div>
                    @{
                        if ((stage.StageData.StageDetails!.Mood & Mood.Sunrise) > 0)
                        {
                            <p>sunrise</p>                            
                        }
                        if ((stage.StageData.StageDetails!.Mood & Mood.Day) > 0)
                        {
                            <p>day</p>
                        }
                        if ((stage.StageData.StageDetails!.Mood & Mood.Sunset) > 0)
                        {
                            <p>sunset</p>
                        }
                        if ((stage.StageData.StageDetails!.Mood & Mood.Night) > 0)
                        {
                            <p>night</p>
                        }
                    }
                </div>
            }
        </div>
    }
</div>


@code {

    [Parameter]
    public string? Name { get; set; }

    private List<Stage> _stages = [];
    private RallyCode? _rallyCode;

    protected override async Task OnInitializedAsync() 
    {
        if (Name is not null)
        {
            _rallyCode = Enum.Parse<RallyCode>(Name, true);
        }

        var stages = Name is null
            ? await StageService.GetAllFilled()
            : await StageService.GetAllFilledByRallyCode(_rallyCode!.Value);

        _stages.Clear();
        _stages.AddRange(stages);
    }

}
